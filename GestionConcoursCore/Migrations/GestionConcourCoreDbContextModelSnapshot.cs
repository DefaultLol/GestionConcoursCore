// <auto-generated />
using System;
using GestionConcoursCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GestionConcoursCore.Migrations
{
    [DbContext(typeof(GestionConcourCoreDbContext))]
    partial class GestionConcourCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GestionConcoursCore.Models.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Admins");

                    b.HasData(
                        new { ID = 1, Password = "admin", Username = "admin" }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.AnneeUniversitaire", b =>
                {
                    b.Property<string>("Cne");

                    b.Property<string>("AnneUni1");

                    b.Property<string>("AnneUni2");

                    b.Property<string>("AnneUni3");

                    b.Property<string>("Redoublant1");

                    b.Property<string>("Redoublant2");

                    b.Property<string>("Redoublant3");

                    b.Property<double>("Semestre1");

                    b.Property<double>("Semestre2");

                    b.Property<double>("Semestre3");

                    b.Property<double>("Semestre4");

                    b.Property<double>("Semestre5");

                    b.Property<double>("Semestre6");

                    b.HasKey("Cne");

                    b.ToTable("AnneeUniversitaires");

                    b.HasData(
                        new { Cne = "R147778136", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 14.2, Semestre2 = 14.8, Semestre3 = 15.0, Semestre4 = 17.0, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R45698310", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 15.3, Semestre2 = 14.5, Semestre3 = 16.0, Semestre4 = 16.5, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R264797", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 15.6, Semestre2 = 16.8, Semestre3 = 15.0, Semestre4 = 14.5, Semestre5 = 17.0, Semestre6 = 14.5 },
                        new { Cne = "R98567893", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 14.3, Semestre2 = 14.9, Semestre3 = 15.6, Semestre4 = 15.5, Semestre5 = 17.6, Semestre6 = 15.5 },
                        new { Cne = "R14078593", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 16.3, Semestre2 = 13.9, Semestre3 = 14.6, Semestre4 = 15.9, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R1478562", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 14.5, Semestre2 = 14.9, Semestre3 = 14.7, Semestre4 = 14.9, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R14456325", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 12.5, Semestre2 = 13.9, Semestre3 = 14.9, Semestre4 = 15.9, Semestre5 = 16.9, Semestre6 = 16.9 },
                        new { Cne = "R96341839", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 13.5, Semestre2 = 14.9, Semestre3 = 15.9, Semestre4 = 16.9, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R14128897", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 13.6, Semestre2 = 15.9, Semestre3 = 16.9, Semestre4 = 14.8, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R14777313", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 13.8, Semestre2 = 16.8, Semestre3 = 15.6, Semestre4 = 14.8, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R14778001", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 14.8, Semestre2 = 16.9, Semestre3 = 14.6, Semestre4 = 14.7, Semestre5 = 0.0, Semestre6 = 0.0 },
                        new { Cne = "R14777891", AnneUni1 = "2016", AnneUni2 = "2017", Redoublant1 = "Non", Redoublant2 = "Non", Redoublant3 = "Non", Semestre1 = 14.6, Semestre2 = 14.8, Semestre3 = 15.0, Semestre4 = 14.5, Semestre5 = 0.0, Semestre6 = 0.0 }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Baccalaureat", b =>
                {
                    b.Property<string>("Cne");

                    b.Property<string>("DateObtentionBac");

                    b.Property<string>("MentionBac");

                    b.Property<double>("NoteBac");

                    b.Property<string>("TypeBac");

                    b.HasKey("Cne");

                    b.ToTable("Baccalaureats");

                    b.HasData(
                        new { Cne = "R147778136", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" },
                        new { Cne = "R45698310", DateObtentionBac = "2015", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" },
                        new { Cne = "R264797", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" },
                        new { Cne = "R98567893", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" },
                        new { Cne = "R14078593", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 17.0, TypeBac = "SMA" },
                        new { Cne = "R1478562", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" },
                        new { Cne = "R14456325", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMB" },
                        new { Cne = "R96341839", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 15.0, TypeBac = "SMA" },
                        new { Cne = "R14128897", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 15.0, TypeBac = "SMA" },
                        new { Cne = "R14777313", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 15.0, TypeBac = "SMA" },
                        new { Cne = "R14778001", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 15.0, TypeBac = "SMA" },
                        new { Cne = "R14777891", DateObtentionBac = "2016", MentionBac = "Bien", NoteBac = 16.0, TypeBac = "SMA" }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Candidat", b =>
                {
                    b.Property<string>("Cne")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Admis");

                    b.Property<string>("Adresse");

                    b.Property<string>("Cin")
                        .IsRequired();

                    b.Property<bool>("Conforme");

                    b.Property<bool>("Convoque");

                    b.Property<DateTime>("DateInscription");

                    b.Property<DateTime>("DateNaissance");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Gsm");

                    b.Property<int>("ID");

                    b.Property<string>("LieuNaissance");

                    b.Property<string>("Matricule");

                    b.Property<string>("Nationalite");

                    b.Property<int>("Niveau");

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.Property<double>("NotePreselec");

                    b.Property<int>("Num_dossier");

                    b.Property<string>("Password");

                    b.Property<string>("Photo");

                    b.Property<string>("Prenom")
                        .IsRequired();

                    b.Property<bool>("Presence");

                    b.Property<string>("Sexe");

                    b.Property<string>("Telephone");

                    b.Property<int>("Verified");

                    b.Property<string>("Ville");

                    b.Property<bool>("listDatt");

                    b.HasKey("Cne");

                    b.HasIndex("ID");

                    b.ToTable("Candidats");

                    b.HasData(
                        new { Cne = "R147778136", Admis = false, Cin = "BL146789", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 824, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "zineb.khalis@gmail.com", ID = 1, Matricule = "A123", Nationalite = "Marocaine", Niveau = 3, Nom = "Khalis", NotePreselec = 0.0, Num_dossier = 0, Password = "test", Prenom = "Zineb", Presence = false, Sexe = "Femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R45698310", Admis = false, Cin = "BE890936", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "imane.abdennour@gmail.com", ID = 1, Matricule = "A89700", Nationalite = "Marocaine", Niveau = 3, Nom = "Abdennour", NotePreselec = 0.0, Num_dossier = 0, Password = "test", Prenom = "Imane", Presence = false, Sexe = "Femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R264797", Admis = false, Cin = "BL7946", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "yassin97@gmail.com", ID = 1, Matricule = "A89710", Nationalite = "Marocaine", Niveau = 3, Nom = "Zineddine", NotePreselec = 0.0, Num_dossier = 451, Password = "test", Prenom = "Ayoub", Presence = true, Sexe = "Homme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R98567893", Admis = false, Cin = "BE74546", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "hicham@gmail.com", ID = 1, Matricule = "A89720", Nationalite = "Marocain", Niveau = 3, Nom = "Ouhamou", NotePreselec = 0.0, Num_dossier = 452, Password = "test", Prenom = "Tarik", Presence = true, Sexe = "Homme", Verified = 1, Ville = "Agadir", listDatt = false },
                        new { Cne = "R14078593", Admis = false, Cin = "BL144243", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "abdelkarim@gmail.com", ID = 1, Matricule = "A89730", Nationalite = "Marocaine", Niveau = 3, Nom = "Kfifat", NotePreselec = 0.0, Num_dossier = 453, Password = "test", Prenom = "Abir", Presence = true, Sexe = "Femme", Verified = 1, Ville = "Essaouira", listDatt = false },
                        new { Cne = "R1478562", Admis = false, Cin = "BE144894", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "yasmin@gmail.com", ID = 2, Matricule = "A89740", Nationalite = "Marocaine", Niveau = 3, Nom = "Khorchaly", NotePreselec = 0.0, Num_dossier = 454, Password = "test", Prenom = "Imane", Presence = true, Sexe = "Femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R14456325", Admis = false, Cin = "BL185895", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "ousama@gmail.com", ID = 2, Matricule = "A89750", Nationalite = "Marocaine", Niveau = 3, Nom = "Dariaoui", NotePreselec = 0.0, Num_dossier = 455, Password = "test", Prenom = "Oussama", Presence = true, Sexe = "homme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R96341839", Admis = false, Cin = "BL145996", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "yasmine@gmail.com", ID = 2, Matricule = "A89760", Nationalite = "Marocaine", Niveau = 3, Nom = "bakhta", NotePreselec = 0.0, Num_dossier = 456, Password = "test", Prenom = "yasmin", Presence = true, Sexe = "femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R14128897", Admis = false, Cin = "BL157890", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "zineb@gmail.com", ID = 2, Matricule = "A89770", Nationalite = "Marocaine", Niveau = 3, Nom = "Khalis", NotePreselec = 0.0, Num_dossier = 457, Password = "test", Prenom = "zineb", Presence = true, Sexe = "femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R14777313", Admis = false, Cin = "BL144810", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "salim@gmail.com", ID = 2, Matricule = "A89790", Nationalite = "Marocaine", Niveau = 3, Nom = "salim", NotePreselec = 0.0, Num_dossier = 459, Password = "test", Prenom = "yahya", Presence = true, Sexe = "homme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R14778001", Admis = false, Cin = "BL148901", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "amina@gmail.com", ID = 2, Matricule = "A89810", Nationalite = "Marocaine", Niveau = 3, Nom = "amina", NotePreselec = 0.0, Num_dossier = 461, Password = "test", Prenom = "anahcham", Presence = true, Sexe = "femme", Verified = 1, Ville = "Casablanca", listDatt = false },
                        new { Cne = "R14777891", Admis = false, Cin = "BL144891", Conforme = false, Convoque = false, DateInscription = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), DateNaissance = new DateTime(2020, 5, 19, 4, 51, 35, 825, DateTimeKind.Local), Email = "nisrin@gmail.com", ID = 1, Matricule = "A8971", Nationalite = "Marocaine", Niveau = 3, Nom = "Moutrib", NotePreselec = 0.0, Num_dossier = 151, Password = "test", Prenom = "Nissrin", Presence = true, Sexe = "femme", Verified = 1, Ville = "Casablanca", listDatt = false }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConcourEcrit", b =>
                {
                    b.Property<string>("Cne");

                    b.Property<double>("NoteGenerale");

                    b.Property<double>("NoteMath");

                    b.Property<double>("NoteSpecialite");

                    b.HasKey("Cne");

                    b.ToTable("CouncourEcrits");

                    b.HasData(
                        new { Cne = "R147778136", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 15.5 },
                        new { Cne = "R45698310", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 15.5 },
                        new { Cne = "R264797", NoteGenerale = 0.0, NoteMath = 17.0, NoteSpecialite = 16.0 },
                        new { Cne = "R98567893", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 16.0 },
                        new { Cne = "R14078593", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 14.0 },
                        new { Cne = "R1478562", NoteGenerale = 0.0, NoteMath = 14.0, NoteSpecialite = 14.0 },
                        new { Cne = "R14456325", NoteGenerale = 0.0, NoteMath = 16.0, NoteSpecialite = 16.0 },
                        new { Cne = "R96341839", NoteGenerale = 0.0, NoteMath = 14.0, NoteSpecialite = 14.0 },
                        new { Cne = "R14128897", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 14.6 },
                        new { Cne = "R14777313", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 14.6 },
                        new { Cne = "R14778001", NoteGenerale = 0.0, NoteMath = 15.0, NoteSpecialite = 14.6 },
                        new { Cne = "R14777891", NoteGenerale = 0.0, NoteMath = 14.0, NoteSpecialite = 16.0 }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConcourOral", b =>
                {
                    b.Property<string>("Cne");

                    b.Property<int>("Classement");

                    b.HasKey("Cne");

                    b.ToTable("CouncourOrals");

                    b.HasData(
                        new { Cne = "R147778136", Classement = 0 },
                        new { Cne = "R45698310", Classement = 0 },
                        new { Cne = "R264797", Classement = 0 },
                        new { Cne = "R98567893", Classement = 0 },
                        new { Cne = "R14078593", Classement = 0 },
                        new { Cne = "R1478562", Classement = 0 },
                        new { Cne = "R14456325", Classement = 0 },
                        new { Cne = "R96341839", Classement = 0 },
                        new { Cne = "R14128897", Classement = 0 },
                        new { Cne = "R14777313", Classement = 0 },
                        new { Cne = "R14778001", Classement = 0 },
                        new { Cne = "R14777891", Classement = 0 }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConfigurationPreselection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoeffBac");

                    b.Property<int>("CoeffS1");

                    b.Property<int>("CoeffS2");

                    b.Property<int>("CoeffS3");

                    b.Property<int>("CoeffS4");

                    b.Property<int>("CoeffS5");

                    b.Property<int>("CoeffS6");

                    b.Property<string>("Filiere");

                    b.Property<double>("NoteJoker");

                    b.Property<double>("NoteSeuil");

                    b.Property<string>("TypeDiplome");

                    b.HasKey("ID");

                    b.ToTable("ConfigurationPreselections");
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConfigurationSelection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoeffMath");

                    b.Property<int>("CoeffSpecialite");

                    b.Property<string>("Filiere");

                    b.Property<int>("NbrPlace");

                    b.Property<int>("NbrPlaceListAtt");

                    b.Property<string>("Niveau");

                    b.Property<double>("NoteMin");

                    b.Property<string>("TypeClassement");

                    b.HasKey("ID");

                    b.ToTable("ConfigurationSelections");
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Corbeille", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNE");

                    b.HasKey("ID");

                    b.ToTable("Corbeilles");
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Diplome", b =>
                {
                    b.Property<string>("Cne");

                    b.Property<string>("Etablissement");

                    b.Property<double>("NoteDiplome");

                    b.Property<string>("Specialite");

                    b.Property<string>("Type");

                    b.Property<string>("VilleObtention");

                    b.HasKey("Cne");

                    b.ToTable("Diplomes");

                    b.HasData(
                        new { Cne = "R147778136", Etablissement = "EST", NoteDiplome = 16.42, Specialite = "Informatique", Type = "DUT", VilleObtention = "safi" },
                        new { Cne = "R45698310", Etablissement = "FP", NoteDiplome = 16.42, Specialite = "Informatique", Type = "DUT", VilleObtention = "safi" },
                        new { Cne = "R264797", Etablissement = "EST", NoteDiplome = 16.0, Specialite = "Informatique", Type = "Lic.pro-DUT", VilleObtention = "safi" },
                        new { Cne = "R98567893", Etablissement = "EST", NoteDiplome = 15.25, Specialite = "Informatique", Type = "Lic.pro-DUT", VilleObtention = "Essaouira" },
                        new { Cne = "R14078593", Etablissement = "EST", NoteDiplome = 15.0, Specialite = "Reseau", Type = "DUT", VilleObtention = "mohamadia" },
                        new { Cne = "R1478562", Etablissement = "EST", NoteDiplome = 16.5, Specialite = "Reseau", Type = "DUT", VilleObtention = "mohamadia" },
                        new { Cne = "R14456325", Etablissement = "EST", NoteDiplome = 15.5, Specialite = "Reseau", Type = "Lic.pro-DUT", VilleObtention = "settat" },
                        new { Cne = "R96341839", Etablissement = "EST", NoteDiplome = 16.5, Specialite = "mecanique", Type = "DUT", VilleObtention = "casablanca" },
                        new { Cne = "R14128897", Etablissement = "EST", NoteDiplome = 15.4, Specialite = "gtr", Type = "DUT", VilleObtention = "casablanca" },
                        new { Cne = "R14777313", Etablissement = "EST", NoteDiplome = 15.5, Specialite = "chimie", Type = "DUT", VilleObtention = "casablanca" },
                        new { Cne = "R14778001", Etablissement = "EST", NoteDiplome = 15.4, Specialite = "chimie", Type = "DUT", VilleObtention = "casablanca" },
                        new { Cne = "R14777891", Etablissement = "EST", NoteDiplome = 15.0, Specialite = "Informatique", Type = "DUT", VilleObtention = "safi" }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Epreuves", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Annee")
                        .IsRequired();

                    b.Property<string>("Matiere")
                        .IsRequired();

                    b.Property<string>("NomFichier")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Epreuves");
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Fichier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cne");

                    b.Property<string>("nom");

                    b.HasKey("ID");

                    b.ToTable("Fichiers");
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Filiere", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom");

                    b.HasKey("ID");

                    b.ToTable("Filieres");

                    b.HasData(
                        new { ID = 1, Nom = "Informatique" },
                        new { ID = 2, Nom = "GTR" },
                        new { ID = 3, Nom = "Industriel" },
                        new { ID = 4, Nom = "GPMC" }
                    );
                });

            modelBuilder.Entity("GestionConcoursCore.Models.AnneeUniversitaire", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Candidat", "Candidat")
                        .WithOne("AnneeUniversitaire")
                        .HasForeignKey("GestionConcoursCore.Models.AnneeUniversitaire", "Cne")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Baccalaureat", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Candidat", "Candidat")
                        .WithOne("Baccalaureat")
                        .HasForeignKey("GestionConcoursCore.Models.Baccalaureat", "Cne")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Candidat", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Filiere", "Filiere")
                        .WithMany("Candidats")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConcourEcrit", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Candidat", "Candidat")
                        .WithOne("CouncourEcrit")
                        .HasForeignKey("GestionConcoursCore.Models.ConcourEcrit", "Cne")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionConcoursCore.Models.ConcourOral", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Candidat", "Candidat")
                        .WithOne("CouncourOral")
                        .HasForeignKey("GestionConcoursCore.Models.ConcourOral", "Cne")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionConcoursCore.Models.Diplome", b =>
                {
                    b.HasOne("GestionConcoursCore.Models.Candidat", "Candidat")
                        .WithOne("Diplome")
                        .HasForeignKey("GestionConcoursCore.Models.Diplome", "Cne")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
